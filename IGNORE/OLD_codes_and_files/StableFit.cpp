//Copyright(c) 2015 M. Mancini
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files(the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions :
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

#include "stdafx.h"
#include "StableFit.h"
#include <algorithm>
#include "solvers.h"
#include "dataanalysis.h"
#include <boost/math/special_functions/erf.hpp>

double nuA [15] = { 2.439f, 2.5f, 2.6f, 2.7f, 2.8f, 3.0f, 3.2f, 3.5f, 4.0f, 5.0f, 6.0f, 8.0f, 10.0f, 15.0f, 25.0f };
double nuB [7] = { 0.0f, 0.1f, 0.2f, 0.3f, 0.5f, 0.7f, 1.0f };

double alphaTab[7][15] = {
	{ 2, 1.916, 1.808, 1.729, 1.664, 1.563, 1.484, 1.391, 1.279, 1.128, 1.029, 0.896, 0.818, 0.698, 0.593 },
	{ 2, 1.924, 1.813, 1.73, 1.663, 1.56, 1.48, 1.386, 1.273, 1.121, 1.021, 0.892, 0.812, 0.695, 0.59 },
	{ 2, 1.924, 1.829, 1.737, 1.663, 1.553, 1.471, 1.378, 1.266, 1.114, 1.014, 0.887, 0.806, 0.692, 0.588 },
	{ 2, 1.924, 1.829, 1.745, 1.668, 1.548, 1.46, 1.364, 1.25, 1.101, 1.004, 0.883, 0.801, 0.689, 0.586 },
	{ 2, 1.924, 1.829, 1.745, 1.676, 1.547, 1.448, 1.337, 1.21, 1.067, 0.974, 0.855, 0.78, 0.676, 0.579 },
	{ 2, 1.924, 1.829, 1.745, 1.676, 1.547, 1.438, 1.318, 1.184, 1.027, 0.935, 0.823, 0.756, 0.656, 0.563 },
	{ 2, 1.924, 1.829, 1.745, 1.676, 1.547, 1.438, 1.318, 1.15, 0.973, 0.874, 0.769, 0.691, 0.595, 0.513 }
	};

double betaTab [7][15]= {
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 2.16, 1.592, 0.759, 0.482, 0.36, 0.253, 0.203, 0.165, 0.136, 0.109, 0.096, 0.082, 0.074, 0.064, 0.056 },
	{ 1, 3.39, 1.8, 1.048, 0.76, 0.518, 0.41, 0.332, 0.271, 0.216, 0.19, 0.163, 0.147, 0.128, 0.112 },
	{ 1, 1, 1, 1.694, 1.232, 0.823, 0.632, 0.499, 0.404, 0.323, 0.284, 0.243, 0.22, 0.191, 0.167 },
	{ 1, 1, 1, 1, 2.229, 1.575, 1.244, 0.943, 0.689, 0.539, 0.472, 0.412, 0.377, 0.33, 0.285 },
	{ 1, 1, 1, 1, 1, 1, 1.906, 1.56, 1.23, 0.827, 0.693, 0.601, 0.546, 0.478, 0.428 },
	{ 1, 1, 1, 1, 1, 1, 1, 1, 2.195, 1.917, 1.759, 1.596, 1.482, 1.362, 1.274 }
};

double a[1][15] = { { 2.439f, 2.5f, 2.6f, 2.7f, 2.8f, 3, 3.2f, 3.5f, 4, 5, 6, 8, 10, 15, 25 } };


double b[1][7] = { { 0.0f, 0.1f, 0.2f, 0.3f, 0.5f, 0.7f, 1.0f } };

double stblfrac_data [1080] = { -1890857.122, -1074.88492, -90.39223076, -26.45987891, -12.74134564, -7.864009407, -5.591791398, -4.343949436, -3.580521077, -3.077683537, -2.729262881, -2.479627529, -2.297138305, -2.162196366, -2.061462692, -1.985261983, -1.926542866, -1.880296842, -1.843044812, -1.812387605, -473.8866778, -16.84460388, -5.619926961, -3.281734136, -2.397479161, -1.959508009, -1.708174381, -1.550822278, -1.447013329, -1.37638192, -1.327391983, -1.292811209, -1.267812588, -1.24913231, -1.234616433, -1.22287978, -1.213041555, -1.204541065, -1.197016952, -1.190232163, -1.354883143, -0.8855778501, -0.7773858278, -0.7357727812, -0.7181850957, -0.7120493514, -0.7121454154, -0.7157018374, -0.7209253714, -0.726542528, -0.7317075569, -0.7359762287, -0.7392122468, -0.7414607678, -0.7428480571, -0.7435216571, -0.7436225251, -0.74327331, -0.742576203, -0.7416143172, -0.004719005699, -0.05039419714, -0.1108600075, -0.1646393852, -0.208889589, -0.2445873831, -0.2729819771, -0.2951510874, -0.3121233685, -0.3249196962, -0.334471424, -0.3415532212, -0.3467713617, -0.3505859, -0.3533413467, -0.3552947624, -0.3566384591, -0.3575167387, -0.3580387844, -0.3582869092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.004719005699, 0.05039419714, 0.1108600075, 0.1646393852, 0.208889589, 0.2445873831, 0.2729819771, 0.2951510874, 0.3121233685, 0.3249196962, 0.334471424, 0.3415532212, 0.3467713617, 0.3505859, 0.3533413467, 0.3552947624, 0.3566384591, 0.3575167387, 0.3580387844, 0.3582869092, 1.354883143, 0.8855778501, 0.7773858278, 0.7357727812, 0.7181850957, 0.7120493514, 0.7121454154, 0.7157018374, 0.7209253714, 0.726542528, 0.7317075569, 0.7359762287, 0.7392122468, 0.7414607678, 0.7428480571, 0.7435216571, 0.7436225251, 0.74327331, 0.742576203, 0.7416143172, 473.8866778, 16.84460388, 5.619926961, 3.281734136, 2.397479161, 1.959508009, 1.708174381, 1.550822278, 1.447013329, 1.37638192, 1.327391983, 1.292811209, 1.267812588, 1.24913231, 1.234616433, 1.22287978, 1.213041555, 1.204541065, 1.197016952, 1.190232163, 1890857.122, 1074.88492, 90.39223076, 26.45987891, 12.74134564, 7.864009407, 5.591791398, 4.343949436, 3.580521077, 3.077683537, 2.729262881, 2.479627529, 2.297138305, 2.162196366, 2.061462692, 1.985261983, 1.926542866, 1.880296842, 1.843044812, 1.812387605, -147636.6405, -296.1237538, -37.7187358, -13.5740422, -7.411052003, -4.988799898, -3.787942909, -3.103035516, -2.675942595, -2.394177022, -2.202290611, -2.070075681, -1.979193969, -1.91716899, -1.87509918, -1.846852936, -1.828439746, -1.817388845, -1.812268963, -1.812387605, -21.85953347, -3.543320127, -1.977029668, -1.507632281, -1.303310228, -1.19954802, -1.144166826, -1.115692822, -1.103448362, -1.1011264, -1.104531584, -1.110930462, -1.118760811, -1.127268239, -1.13617164, -1.145449097, -1.155224344, -1.165719408, -1.177246763, -1.190232163, -0.05193811328, -0.1633949875, -0.2617724006, -0.3392619823, -0.4018554923, -0.4539746445, -0.4979328472, -0.5348184073, -0.5654705188, -0.5909430146, -0.6123665499, -0.6307488506, -0.6469130898, -0.6615145568, -0.6750798357, -0.6880470899, -0.7008026232, -0.7137148222, -0.727169752, -0.7416143172, -0.03167687806, -0.06488347295, -0.0991385473, -0.130666397, -0.1574578108, -0.1797875581, -0.19861224, -0.2148458046, -0.2292024721, -0.2422125651, -0.2542699932, -0.2656748455, -0.2766656461, -0.287442894, -0.2981872823, -0.3090746307, -0.3202900039, -0.3320450798, -0.3445973948, -0.3582869092, -0.02998229841, -0.03235136568, -0.01058934315, 0.01472786014, 0.03649529125, 0.05320761222, 0.06497369053, 0.07235439352, 0.07603800885, 0.07671459794, 0.07500001602, 0.07139599669, 0.06628276248, 0.05992932695, 0.05250925429, 0.04411421669, 0.03476266164, 0.0243991792, 0.01289010977, 0, 0.1944613194, 0.3117984497, 0.3615078717, 0.3879646156, 0.4042606355, 0.4152379986, 0.4229018706, 0.428090047, 0.4311273813, 0.4321442286, 0.4312423595, 0.4285591238, 0.4242644841, 0.4185310514, 0.4115050794, 0.4032875933, 0.3939222837, 0.3833860261, 0.3715758694, 0.3582869092, 22.64297017, 3.703766302, 2.034998949, 1.510923485, 1.265729979, 1.126910935, 1.039315712, 0.9801156996, 0.9380990289, 0.9070002634, 0.8829463516, 0.8633779162, 0.8465599716, 0.8313215935, 0.8168794983, 0.8027015702, 0.7884022863, 0.7736657969, 0.7581862145, 0.7416143172, 4841.681689, 54.91635522, 12.56979234, 6.069209133, 3.940274296, 2.96344702, 2.423693541, 2.089182215, 1.865572849, 1.708118159, 1.593041126, 1.506471133, 1.439628955, 1.386580264, 1.343153406, 1.306371039, 1.274091492, 1.244744203, 1.21712481, 1.190232163, 14345464.73, 2987.011339, 180.4473474, 44.87048929, 19.60113434, 11.32727409, 7.671280873, 5.73269133, 4.573075545, 3.818589092, 3.297130127, 2.920640582, 2.640274593, 2.426998378, 2.262233765, 2.133064563, 2.029912595, 1.945516532, 1.874392546, 1.812387605, -4686.998894, -51.45071882, -11.51718246, -5.524535336, -3.611648532, -2.76237916, -2.313577187, -2.052416861, -1.893403772, -1.796585983, -1.740583122, -1.711775396, -1.700465158, -1.700212466, -1.70723827, -1.719534615, -1.736176666, -1.756931456, -1.782079728, -1.812387605, -0.2681009915, -0.4350930213, -0.530521288, -0.6015232066, -0.6620641788, -0.7174026994, -0.7694003005, -0.8178267862, -0.8615585465, -0.9003104217, -0.934755497, -0.9658656088, -0.9945788535, -1.021718798, -1.048005562, -1.074094695, -1.100624477, -1.128270402, -1.157812819, -1.190232163, -0.06335376613, -0.1297738965, -0.1985319372, -0.2624863717, -0.3174865472, -0.363754436, -0.4030045273, -0.4369896091, -0.4671253359, -0.4944847533, -0.519877007, -0.5439265161, -0.5671356858, -0.5899325077, -0.6127077038, -0.6358474024, -0.6597648782, -0.6849381556, -0.7119602077, -0.7416143172, -0.06256908981, -0.1058190431, -0.1215669874, -0.126114969, -0.1284283108, -0.1318108374, -0.1372885009, -0.1450218673, -0.154846114, -0.1664940538, -0.1796994139, -0.1942454975, -0.2099854734, -0.2268483937, -0.244840378, -0.2640470287, -0.2846415661, -0.3069024735, -0.3312464673, -0.3582869092, -0.0004911181618, 0.07928758679, 0.1295711243, 0.1575625248, 0.1726794062, 0.1799982238, 0.1821699713, 0.1806145618, 0.1761248754, 0.1691770294, 0.1600901411, 0.1491003611, 0.1363865274, 0.1220722642, 0.1062191001, 0.0888158646, 0.06976629777, 0.04886974405, 0.02578932639, 0, 3.0459583, 1.315675725, 0.9757973307, 0.829436141, 0.7456405896, 0.6900226415, 0.6495436521, 0.6180526887, 0.5921654464, 0.569792316, 0.5495326578, 0.5304020801, 0.511694341, 0.4928954731, 0.4736165966, 0.4535361613, 0.4323485981, 0.4097162006, 0.3852184728, 0.3582869092, 195.5956459, 11.18917024, 4.357570503, 2.718083522, 2.041945502, 1.682687096, 1.46208817, 1.313508265, 1.206803764, 1.126395471, 1.063360967, 1.012144437, 0.9690437806, 0.9314651792, 0.8975270882, 0.8658237614, 0.8352619776, 0.8049334693, 0.7740056421, 0.7416143172, 31546.16793, 142.0805372, 24.03953052, 9.998426062, 5.930362539, 4.190132769, 3.268280842, 2.710662024, 2.34199591, 2.08246914, 1.89115893, 1.745070642, 1.630251731, 1.53763063, 1.460938381, 1.395630981, 1.338301798, 1.286320344, 1.237570698, 1.190232163, 77162661.15, 6969.521346, 319.665799, 69.41784108, 27.98990029, 15.33578393, 9.991349774, 7.243609508, 5.634462725, 4.60185701, 3.893417078, 3.382471283, 2.999860063, 2.705234908, 2.47361057, 2.288441176, 2.137883347, 2.012884308, 1.906295529, 1.812387605, -21.04710824, -3.379418097, -1.91992805, -1.508399003, -1.348510543, -1.284465356, -1.267907903, -1.279742001, -1.309886184, -1.349392555, -1.391753943, -1.434304119, -1.476453647, -1.518446569, -1.560864596, -1.604464356, -1.650152416, -1.699029551, -1.752489823, -1.812387605, -0.09503065419, -0.1947070825, -0.2987136341, -0.3973064533, -0.4838698272, -0.5579448431, -0.6215822273, -0.6771753949, -0.7267793058, -0.7720164853, -0.8141486818, -0.8541760575, -0.8929234555, -0.9311104142, -0.9694099705, -1.008502024, -1.049129637, -1.092166845, -1.138712425, -1.190232163, -0.09460338726, -0.1756165596, -0.2282691311, -0.2638458906, -0.2918110046, -0.3167744873, -0.3408290017, -0.364920442, -0.3894754729, -0.4146904023, -0.4406707089, -0.467503301, -0.4952960991, -0.5242037261, -0.5544463409, -0.5863313161, -0.6202819599, -0.6568811179, -0.6969403639, -0.7416143172, -0.07132464705, -0.05885471032, -0.03846810487, -0.0280176865, -0.0261540708, -0.03037902422, -0.03894619676, -0.05076849314, -0.06518223106, -0.08178056142, -0.1003134231, -0.1206343412, -0.1426762955, -0.1664453845, -0.1920257997, -0.2195942671, -0.2494428999, -0.2820166787, -0.3179740384, -0.3582869092, 0.644473261, 0.5412205715, 0.4864603927, 0.4457073929, 0.4118964225, 0.3823074984, 0.355490596, 0.3305043127, 0.3066571802, 0.2834017043, 0.2602853501, 0.2369238066, 0.2129824522, 0.188156396, 0.1621474809, 0.1346349888, 0.1052403814, 0.07348119932, 0.0387067324, 0, 23.39312511, 3.858569195, 2.09150744, 1.515362821, 1.231804842, 1.060749496, 0.9442937075, 0.8583603823, 0.7911221544, 0.7360251816, 0.6890778676, 0.6476526201, 0.6099033924, 0.5744600865, 0.5402514097, 0.5063904596, 0.4720865286, 0.4365637762, 0.3989743423, 0.3582869092, 1131.527107, 27.42019413, 8.094356141, 4.405625423, 3.045873293, 2.368493557, 1.968378518, 1.704951234, 1.518043794, 1.377948008, 1.268363069, 1.17956311, 1.105319244, 1.041384485, 0.9846979578, 0.9329399521, 0.8842632876, 0.8371061471, 0.7900396709, 0.7416143172, 152063.1637, 314.8956062, 41.32943146, 15.18515135, 8.367182529, 5.624308785, 4.226708866, 3.402197104, 2.865360079, 2.4903939, 2.214464604, 2.003098342, 1.835905829, 1.700021766, 1.586823477, 1.490188322, 1.405530485, 1.329245194, 1.258353899, 1.190232163, 325319255.1, 14373.15176, 520.587677, 100.6582036, 37.90739646, 19.85701175, 12.52691967, 8.859346059, 6.752431092, 5.418366794, 4.510891039, 3.859051364, 3.370702721, 2.992693809, 2.692636528, 2.449737611, 2.249772716, 2.082221357, 1.938735807, 1.812387605, -0.1267075423, -0.2597188113, -0.4004811496, -0.538502428, -0.6642916521, -0.7754208908, -0.8732998811, -0.9604322014, -1.039287446, -1.111986322, -1.180285916, -1.245653509, -1.309356536, -1.372547246, -1.436342855, -1.501904089, -1.570525854, -1.643747672, -1.723509779, -1.812387605, -0.1264483719, -0.2437377727, -0.3333750988, -0.4016893642, -0.4577316521, -0.5069548741, -0.5523620702, -0.5956554729, -0.6378655338, -0.6796745662, -0.7215886444, -0.7640354693, -0.8074261467, -0.8522003644, -0.8988670245, -0.9480479125, -1.000533793, -1.057363229, -1.11994185, -1.190232163, -0.1158003424, -0.1620942232, -0.1790483132, -0.1937097726, -0.2109729531, -0.2311198639, -0.2537077423, -0.278325237, -0.3047045003, -0.3327092628, -0.3623063449, -0.3935470145, -0.4265595392, -0.4615525704, -0.4988293297, -0.5388134824, -0.5820906648, -0.6294732447, -0.6821024215, -0.7416143172, 0.1186775036, 0.1847231745, 0.1899666578, 0.1756596652, 0.1538218851, 0.1287679439, 0.1022243388, 0.07488543991, 0.04698265182, 0.01852002328, -0.01062008676, -0.04062891141, -0.07175196684, -0.1042870734, -0.1385948878, -0.1751227988, -0.2144432379, -0.2573138196, -0.3047716554, -0.3582869092, 4.884639795, 1.686842471, 1.132342495, 0.8944978064, 0.75380112, 0.6558265419, 0.5806408913, 0.5191065509, 0.4663489244, 0.4194539705, 0.376509986, 0.3361566147, 0.297349964, 0.2592283952, 0.2210255605, 0.1820030837, 0.1413881486, 0.09829989965, 0.05165115574, 0, 123.1812405, 9.151933727, 3.856468346, 2.470027172, 1.862167039, 1.521067254, 1.300039378, 1.142711538, 1.023045103, 0.9273664178, 0.847763392, 0.7792812068, 0.718594353, 0.6633207377, 0.6116407715, 0.5620594176, 0.5132627179, 0.4639774715, 0.4128508866, 0.3582869092, 4991.37061, 58.32596523, 13.6173644, 6.617793943, 4.277065692, 3.176211387, 2.549432728, 2.146593647, 1.865193645, 1.656315875, 1.49389197, 1.36279756, 1.253624581, 1.160149469, 1.078008119, 1.003953952, 0.9354146255, 0.8702022492, 0.8062927603, 0.7416143172, 590165.6732, 624.6491283, 65.81680475, 21.7355708, 11.25045444, 7.254212029, 5.287806421, 4.154585934, 3.428194997, 2.925780747, 2.557944985, 2.27656275, 2.053593165, 1.871725504, 1.71963088, 1.589489776, 1.475587598, 1.37348121, 1.279472666, 1.190232163, 1143638706, 27038.23368, 796.4291266, 139.1051004, 49.35349275, 24.8650049, 15.25895956, 10.56731639, 7.918478701, 6.262067266, 5.144949916, 4.346635348, 3.749599177, 3.286641675, 2.917178604, 2.615585031, 2.364937634, 2.15334227, 1.971693892, 1.812387605, -0.1582153175, -0.3110425776, -0.4383733962, -0.5421475801, -0.6303884905, -0.7089178961, -0.7814055112, -0.8502117698, -0.9169548634, -0.9828374636, -1.048835661, -1.115815772, -1.184614345, -1.256100353, -1.331235979, -1.411143948, -1.497190629, -1.591104422, -1.695147748, -1.812387605, -0.1526287734, -0.2498255244, -0.3063859169, -0.3504924055, -0.3911254396, -0.4309657385, -0.4709130419, -0.5113624096, -0.5525816076, -0.5948321009, -0.6384119893, -0.683677684, -0.7310612145, -0.7810921001, -0.8344269071, -0.8918931068, -0.9545526172, -1.023797333, -1.101496413, -1.190232163, -0.05695213482, -0.02485009115, -0.02455774348, -0.0424372062, -0.06906960852, -0.1000745486, -0.1334091112, -0.1681287272, -0.2038409527, -0.2404547732, -0.2780623638, -0.316883753, -0.3572466721, -0.3995862987, -0.4444626894, -0.4925935308, -0.5449092277, -0.6026377434, -0.667437983, -0.7416143172, 1.359937191, 0.7928324704, 0.6068350758, 0.4949176896, 0.4117787224, 0.3435869264, 0.2844376472, 0.2312306853, 0.1820841982, 0.1357181058, 0.09117291945, 0.04766184332, 0.004481886485, -0.0390493375, -0.08364689015, -0.130113394, -0.1794049921, -0.2327202767, -0.2916310469, -0.3582869092, 24.10567058, 4.005534671, 2.144263118, 1.518214627, 1.198109338, 0.9966378801, 0.8532685386, 0.7427048698, 0.6524693172, 0.5756299951, 0.50796063, 0.4466711397, 0.3897746494, 0.3357416131, 0.2832892169, 0.2312355801, 0.1783807793, 0.1233869209, 0.06463145748, 9.714451465e-17, 504.9829135, 18.90722475, 6.427275566, 3.715903403, 2.636417882, 2.065989356, 1.711228437, 1.466088158, 1.283765226, 1.140575451, 1.023262412, 0.9237922893, 0.8369566525, 0.7591595458, 0.6877508181, 0.620626501, 0.5559603894, 0.4919976875, 0.4268552022, 0.3582869092, 18084.82789, 112.0299054, 21.31886896, 9.395528701, 5.735282953, 4.099439856, 3.198582997, 2.632582798, 2.243339709, 1.957469852, 1.736744887, 1.559416516, 1.412280239, 1.286729856, 1.176933895, 1.078670034, 0.9886802004, 0.9042295461, 0.8227686378, 0.7416143172, 1944624.279, 1139.848804, 98.9480962, 29.74824392, 14.58002372, 9.070365685, 6.442950257, 4.96097149, 4.025088869, 3.384287798, 2.918103806, 2.562588804, 2.28105018, 2.051085944, 1.858294826, 1.69297356, 1.548256387, 1.418980227, 1.300924242, 1.190232163, 3492208270, 47370.75925, 1161.019167, 185.2377746, 62.32811768, 30.3383651, 18.17240938, 12.35792736, 9.126360342, 7.128676007, 5.792462636, 4.842756649, 4.134472567, 3.585273662, 3.145733198, 2.784907129, 2.482804054, 2.226062706, 2.00514938, 1.812387605 };

double Alp[20] = { 0.1000, 0.2000, 0.3000, 0.4000, 0.5000, 0.6000, 0.7000, 0.8000, 0.9000, 1.0000, 1.1000, 1.2000, 1.3000, 1.4000, 1.5000, 1.6000, 1.7000, 1.8000, 1.9000, 2.0000 };
double Bet[6] = { 0, 0.2000, 0.4000, 0.6000, 0.8000, 1.0000 };
double P[9] = { 0.1000, 0.2000, 0.3000, 0.4000, 0.5000, 0.6000, 0.7000, 0.8000, 0.9000 };

typedef boost::tokenizer<boost::char_separator<char> > tokenizer;

StableFit::StableFit()
{
}




StableFit::~StableFit()
{
}


std::vector<double> StableFit::Execute(std::vector<double> data)
{
	std::vector<double> alphabeta,gammadelta,result;
	alphabeta = intAlphaBeta(data);

	gammadelta = intGamDel(data, alphabeta[0], alphabeta[1]);
	
	/*std::vector<double> x, y, regress_result;

	x.push_back(-2.0741);
	x.push_back(1.0000);
	x.push_back(-1.3810);
	x.push_back(1.0000);
	x.push_back(-0.9755);
	x.push_back(1.0000);
	x.push_back(-0.6879);
	x.push_back(1.0000);
	x.push_back(-0.4647);
	x.push_back(1.0000);
	x.push_back(-0.2824);
	x.push_back(1.0000);
	x.push_back(-0.1282);
	x.push_back(1.0000);
	x.push_back(0.0053);
	x.push_back(1.0000);
	x.push_back(0.1231);
	x.push_back(1.0000);

	y.push_back(3.5842);
	y.push_back(-2.1942);
	y.push_back(-1.3782);
	y.push_back(-0.7986);
	y.push_back(-0.3538);
	y.push_back(-0.0064);
	y.push_back(0.2489);
	y.push_back(0.3955);
	y.push_back(0.4141);

	regress_result = regress(y, x, 2, 9);*/

	//std::vector<double> xgv, ygv, zgv;


	/*for (int i = 1; i <= 20; i = i + 1)
		xgv.push_back((double)i / 10.0f);
	for (int i = 0; i <= 10; i = i + 2)
		ygv.push_back((double)i / 10.0f);
	for (int i = 1; i <= 9; i = i + 1)
		zgv.push_back((double)i / 10.0f);*/

	//double ***Alp, ***Bet, ***P;

	//meshgrid(xgv, ygv, zgv, Alp, Bet, P);

	//std::vector<double> utemp, guess_result;

	//utemp.push_back(0.75);
	//utemp.push_back(0.25);

	//guess_result = intGuess(2, 1, utemp);


	//std::vector<std::vector<std::vector<double>>> alpIn,betIn,uIn;

	//meshgrid(alpha, beta, utemp, alpIn, betIn, uIn);

	result.push_back(alphabeta[0]);
	result.push_back(alphabeta[1]);
	result.push_back(gammadelta[0]);
	result.push_back(gammadelta[1]);
	return result;
}

std::vector<double> StableFit::intAlphaBeta(std::vector<double> data)
{
	std::vector<double> Xpcts, percentages, result;
	double nuAlpha, nuBeta, s, alpha, beta;

	percentages.push_back(95);
	percentages.push_back(75);
	percentages.push_back(50);
	percentages.push_back(25);
	percentages.push_back(5);

	Xpcts = prctile(data, percentages);

	nuAlpha = (Xpcts[0] - Xpcts[4]) / (Xpcts[1] - Xpcts[3]);
	nuBeta = (Xpcts[0] + Xpcts[4] - 2 * Xpcts[2]) / (Xpcts[0] - Xpcts[4]);

	if (nuAlpha < 2.4390)
		nuAlpha = 2.439 + pow(10,-12);
	else
		if (nuAlpha > 25)
			nuAlpha = 25 - pow(10,-12);

	if (nuBeta >= 0)
		s = 1;
	else
		s = -1;


	//remap(alphaTab_cv, alphaTab_rescaled, nuAlpha_cv, nuBeta_cv, cv::INTER_LINEAR);


	alpha = interp2(&a[0][0],&b[0][0],&alphaTab[0][0],nuAlpha,abs(nuBeta),7,15);

	beta = s * interp2(&a[0][0], &b[0][0], &betaTab[0][0], nuAlpha, abs(nuBeta), 7, 15);


	if (beta>1)
		beta = 1;
	else
		if (beta < -1)
			beta = -1;

	result.push_back(alpha);
	result.push_back(beta);

	return result;
}

std::vector<double> StableFit::intGamDel(std::vector<double> X, double alpha, double beta)
{
	std::vector<double> result, Xpcts, percentages, Xquart, Xmed, u;

	percentages.push_back(75);
	percentages.push_back(50);
	percentages.push_back(25);

	Xpcts = prctile(X,percentages);

	if (abs(alpha - 1) < 0.02)
		alpha = 1;
	
	u.push_back(0.75);
	u.push_back(0.25);

	Xquart=stblinv(u, alpha, beta, 1, 0);

	u.clear();

	u.push_back(0.5);

	Xmed = stblinv(u, alpha, beta, 1, -beta*tan(alglib::pi()*alpha / 2));

	long double gam = (Xpcts[0] - Xpcts[2]) / (Xquart[0] - Xquart[1]);

	long double zeta = Xpcts[1] - gam * Xmed[0];

	long double tangent = tan(alpha*alglib::pi() / 2.0);

	long double delta = zeta - beta*gam*tangent;

	result.push_back(gam);
	result.push_back(delta);

	return result;
}

double StableFit::interp2(double *a, double *b, double *v, double ta, double tb, int rows, int cols)
{
	int i, row, column;

	i = 1;
	row = -1;
	column = -1;

	while ((column == -1) && (i < cols))
	{
		if ((a[i - 1] <= ta) && (ta <= a[i]))
		{
			column = i - 1;
		}
		else
		{
			i++;
		}
	}

	i = 1;

	while ((row == -1) && (i < rows))
	{
		if ((b[i - 1] <= tb) && (tb <= b[i]))
		{
			row = i - 1;
		}
		else
		{
			i++;
		}
	}

	if ((row != -1) && (column != -1))
	{
		double relcol = abs(a[column] - ta) / abs(a[column] - a[column + 1]);

		double mean1 = v[row*cols + column] + (v[row*cols + column + 1] - v[row*cols + column])*relcol;
		double mean2 = v[(row + 1)*cols + column] + (v[(row + 1)*cols + column + 1] - v[(row + 1)*cols + column])*relcol;

		double relrow = abs(b[row] - tb) / abs(b[row] - b[row + 1]);

		double result = mean1 + (mean2 - mean1)*relrow;
		
		return result;
	}
	else
	{
		return -1;
	}
}

double StableFit::interp3(double *a, double *b, double *c, double *v, double ta, double tb, double tc, int rows, int cols, int depthlevels)
{
	int i, row, column, depth;

	i = 1;
	row = -1;
	column = -1;
	depth = -1;

	while ((column == -1) && (i < cols))
	{
		if ((a[i - 1] <= ta) && (ta <= a[i]))
		{
			column = i - 1;
		}
		else
		{
			i++;
		}
	}

	i = 1;

	while ((row == -1) && (i < rows))
	{
		if ((b[i - 1] <= tb) && (tb <= b[i]))
		{
			row = i - 1;
		}
		else
		{
			i++;
		}
	}

	i = 1;

	while ((depth == -1) && (i < depthlevels))
	{
		if ((c[i - 1] <= tc) && (tc <= c[i]))
		{
			depth = i - 1;
		}
		else
		{
			i++;
		}
	}

	if ((row != -1) && (column != -1) && (depth != -1))
	{
		double v000, v010, v100, v110, v001, v011, v101, v111;

		v000 = v[depthlevels*cols*row + cols*depth + column];
		v010 = v[depthlevels*cols*row + cols*depth + (column+1)];
		v100 = v[depthlevels*cols*(row+1) + cols*depth + column];
		v110 = v[depthlevels*cols*(row+1) + cols*depth + (column+1)];

		v001 = v[depthlevels*cols*row + cols*(depth+1) + column];
		v011 = v[depthlevels*cols*row + cols*(depth + 1) + (column + 1)];
		v101 = v[depthlevels*cols*(row + 1) + cols*(depth + 1) + column];
		v111 = v[depthlevels*cols*(row + 1) + cols*(depth + 1) + (column + 1)];

		double relcol = abs(a[column] - ta) / abs(a[column] - a[column + 1]);

		double mean1 = v000 + (v010 - v000) * relcol;
		double mean2 = v100 + (v110 - v100) * relcol;

		double mean3 = v001 + (v011 - v001) * relcol;
		double mean4 = v101 + (v111 - v101) * relcol;

		double relrow = abs(b[row] - tb) / abs(b[row] - b[row + 1]);

		double result1 = mean1 + (mean2 - mean1)*relrow;

		double result2 = mean3 + (mean4 - mean3)*relrow;

		double reldepth = abs(c[depth] - tc) / abs(c[depth] - c[depth + 1]);

		double result = result1 + (result2 - result1)*reldepth;
		
		return result;
	}
	else
	{
		return -1;
	}
}

std::vector<double> StableFit::prctile(std::vector<double> data, std::vector<double> prcvec)
{
	std::vector<double> result;

	std::sort (data.begin(), data.end()) ;

	for (int i = 0; i < prcvec.size(); i++)
	{
		double element = prcvec[i] / 100.0;
		result.push_back(data[(int)(data.size()*element)]);
	}

	return result;
}

std::vector<double> StableFit::regress(std::vector<double> y, std::vector<double> x, int nvars, int nsamples)
{
	alglib::real_2d_array xy;
	alglib::ae_int_t info;
	alglib::linearmodel lm;
	alglib::lrreport ar;

	xy.setlength(nsamples, nvars+1);

	for (int i = 0; i < nsamples; i++)
	{
		for (int j = 0; j < nvars; j++)
		{
			xy[i][j] = x[i*nvars+j];
		}
		xy[i][nvars] = y[i];
	}

	alglib::lrbuildz(xy, nsamples, nvars, info, lm, ar);

	alglib::real_1d_array v;
	alglib::ae_int_t nvars2;

	alglib::lrunpack(lm, v, nvars2);

	std::vector<double> result;

	for (int i = 0; i < nvars2; i++)
		result.push_back(v[i]);

	return result;
}

void StableFit::meshgrid(std::vector<double> xgv, std::vector<double> ygv, std::vector<double> zgv, double ***&X, double ***&Y, double ***&Z)
{
	int lx, ly, lz;

	X = new double** [ygv.size()];
	Y = new double** [ygv.size()];
	Z = new double** [ygv.size()];

	for (ly = 0; ly < ygv.size(); ly++)
	{
		X[ly] = new double *[xgv.size()];
		Y[ly] = new double *[xgv.size()];
		Z[ly] = new double *[xgv.size()];
		for (lx=0; lx < xgv.size(); lx++)
		{
			X[ly][lx] = new double[zgv.size()];
			Y[ly][lx] = new double[zgv.size()];
			Z[ly][lx] = new double[zgv.size()];
		}
	}

	
	for (ly = 0; ly < ygv.size(); ly++)
	{
		for (lz=0; lz < zgv.size(); lz++)
		{
			for (lx = 0; lx < xgv.size(); lx++)
			{
				X[ly][lx][lz] = xgv[lx];
				Y[ly][lx][lz] = ygv[ly];
				Z[ly][lx][lz] = zgv[lz];
			}
		}
	}
	

}

std::vector<double> StableFit::intGuess(double alpha, double beta, std::vector<double> u)
{
	std::vector<double> utemp, high, low, middle, result;
	std::vector<int> high_ind, low_ind, middle_ind;
	double C;

	result.resize(u.size());

	utemp = u;

	if (alpha < 0.1)
	{
		alpha = 0.1;
	}
	
	if (beta == 1)
	{
		for (int i=0; i < utemp.size(); i++)
			if (utemp[i] < 0.1) utemp[i] = 0.1;
	}

	for (int i=0; i < utemp.size(); i++)
	{
		if ((utemp[i] > 0.1) && (utemp[i] < 0.9))
		{
			middle.push_back(utemp[i]);
			middle_ind.push_back(i);
		}
		if (utemp[i] <= 0.1)
		{
			low.push_back(utemp[i]);
			low_ind.push_back(i);
		}
		if (utemp[i] >= 0.9)
		{
			high.push_back(utemp[i]);
			high_ind.push_back(i);
		}
	}

	if ((high.size()>0) || (low.size() > 0))
	{
		if (alpha != 1)
		{
			C = (1 - alpha) / (alglib::gammafunction(2 - alpha) * cos(alglib::pi()*alpha / 2));
		}
		else
		{
			C = 2 / alglib::pi();
		}

		for (int i = 0; i < high.size();i++)
			result[high_ind[i]] = pow(((1 - u[high_ind[i]]) / (C * .5 * (1 + beta))),(-1 / alpha));
		for (int i = 0; i < low.size(); i++)
			result[low_ind[i]] = pow(-(u[low_ind[i]] / (C * .5 * (1 - beta))),(-1 / alpha));
	}

	if (middle.size() > 0)
	{
		

		for (int i = 0; i < middle.size(); i++)
		{
			double interp_res = interp3(&Alp[0], &Bet[0], &P[0], &stblfrac_data[0], alpha, beta, middle[i], 6, 20, 9);
			result[middle_ind[i]] = interp_res;
		}

	}

	
	return result;
}

std::vector<double> StableFit::stblinv(std::vector<double> u, double alpha, double beta, double gam, double delta)
{
	double itermax = 30;
	double maxbisecs = 30;
	double tol = pow(10,-8);
	double signBeta,deltaM;

	std::vector<double> x;

	if (alpha == 2)
	{
		// Gaussian distribution
		for (int i = 0; i < u.size(); i++)
		{
			double value = -2 * boost::math::erfc_inv(2 * u[i]);
			value = value*gam + delta;
			x.push_back(value);
		}
	}
	else
	{
		if ((alpha == 1) && (beta == 0))
		{
			// Cauchy distribution
			for (int i = 0; i < u.size(); i++)
			{
				double value = tan(alglib::pi()*(u[i] - 0.5));
				value = value*gam + delta;
				x.push_back(value);
			}
		}
		else
		{
			if ((alpha == 0.5) && (abs(beta) == 1))
			{
				// Levy distribution
				for (int i = 0; i < u.size(); i++)
				{
					double value = 0.5 * beta / pow(boost::math::erfc_inv(u[i]), 2);
					value = value*gam + delta;
					x.push_back(value);
				}
			}
			else
			{
				//General case
				if (beta < 0)
				{
					signBeta = -1;
					for (int i = 0; i < u.size(); i++)
					{
						u[i] = 1 - u[i];
					}
					beta = -beta;
				}
				else
				{
					signBeta = 1;
				}

				if (abs(alpha - 1) > pow(10, 5))
					deltaM = -beta * tan(alpha*alglib::pi() / 2);
				else
					deltaM = 0;

				x = intGuess(alpha, beta, u);

				if (abs(1 - alpha) > pow(10, 5))
				{
					for (int i = 0; i < x.size();i++)
						x[i] = signBeta*(x[i] - deltaM)*gam + delta;
				}
				else
				{
					for (int i = 0; i < x.size(); i++)
						x[i] = signBeta*(x[i] * gam + (2 / alglib::pi()) * beta * gam * log(gam)) + delta;
				}

			}
		}
	}

	return x;
}