library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
if(alpha <=2)
{Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/alpha)), 0)
if(j == 1){DISTANCE <- 20}
if(j == 1){DISTANCE <- 2}
stable_dist <- stable_pdf(DISTANCE, pars)
if(alpha == 2){stable_dist <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))	}
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
if(alpha <=2)
{Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/alpha)), 0)
if(j == 1){DISTANCE <- 20}
if(j == 1){DISTANCE <- 2}
stable_dist <- stable_pdf(DISTANCE, pars)
if(alpha == 2){stable_dist <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))	}
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/alpha)), 0)
if(j == 1){DISTANCE <- 20}
if(j == 1){DISTANCE <- 2}
stable_dist <- stable_pdf(DISTANCE, pars)
if(alpha == 2){stable_dist <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))	}
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/alpha)), 0)
if(j == 1){DISTANCE <- 20}
if(j == 1){DISTANCE <- 2}
stable_dist <- stable_pdf(DISTANCE, pars)
stable_dist <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/alpha)), 0)
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
stable_dist <- stable_pdf(DISTANCE, pars)
stable_dist <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/alpha)), 0)
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/alpha)), 0)
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
stable_dist <- stable_pdf(DISTANCE, pars)
stable_dist <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
stable_dist <- stable_pdf(DISTANCE, pars)
stable_dist <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/2.0)), 0)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(alpha, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
#Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
stable_pdf(DISTANCE, pars)
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
pars <- c(0.5, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(1.99, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle(paste("Alpha", alpha, "Rho", 1)) +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 20}
if(j == 2){DISTANCE <- 2}
pars <- c(0.5, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(1.99, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle("coalescence time distributions") +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 10}
if(j == 2){DISTANCE <- 2}
pars <- c(0.5, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(1.99, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle("coalescence time distributions") +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 2}
if(j == 2){DISTANCE <- 20}
pars <- c(0.5, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(1.99, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle("coalescence time distributions") +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 20
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 2}
if(j == 2){DISTANCE <- 10}
pars <- c(0.5, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(1.99, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle("coalescence time distributions") +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
library(libstableR)
library(argparse)
library(mdatools)
library(ggplot2)
library(gridExtra)
library(Hmisc)
library(dplyr)
# this code produces qualitative illustrations of distribution of coalescence times - this is not the true distribution of coalescence times.
for(j in 1:2){
rho <- 1
Final_Time <- 10
Numeric_approx_Data_plot_ALL <-  data.frame(matrix(0, Final_Time, 4))
for( i in 1:Final_Time )
{   Numeric_approx_Data_plot_ALL[i,1] <- i #log(i)
time_dummy <- i
scale_parameter <- 1
if(j == 1){DISTANCE <- 2}
if(j == 2){DISTANCE <- 10}
pars <- c(0.5, 0, scale_parameter*((time_dummy)^(1/0.5)), 0)
Numeric_approx_Data_plot_ALL[i,2] <-  stable_pdf(DISTANCE, pars)
pars <- c(1.99, 0, scale_parameter*((time_dummy)^(1/1.99)), 0)
Numeric_approx_Data_plot_ALL[i,3] <-  stable_pdf(DISTANCE, pars)
Numeric_approx_Data_plot_ALL[i,4] <- abs(dnorm(DISTANCE, sqrt(2)*scale_parameter*(time_dummy)^(1/2)))
}
if(j == 1){pdf("Plot_DCT_short_distance.pdf")}
if(j == 2){pdf("Plot_DCT_long_distance.pdf")}
p <- ggplot()  + labs( x = "Time", y ="Dist of Coalescence Times") + ggtitle("coalescence time distributions") +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X2, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X3, color = "numeric "), se = FALSE, linetype="dashed") + geom_smooth(data=Numeric_approx_Data_plot_ALL, aes(x = X1, y =X4, color = "numeric "), se = FALSE, linetype="dashed") + scale_x_log10() + scale_y_log10()
print(p)
dev.off()
}
